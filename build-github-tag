import groovy.transform.TupleConstructor

@TupleConstructor()
class TagOnRepo {
    String repo
    String tag
    boolean latest = false
}

def tagsToBuild = [
        new TagOnRepo(repo: 'linagora/james-project', tag: 'openpaas-1.4.0'),
        new TagOnRepo(repo: 'linagora/james-project', tag: 'openpaas-1.4.1'),
        new TagOnRepo(repo: 'linagora/james-project', tag: 'james-project-3.3.0'),
        new TagOnRepo(repo: 'linagora/james-project', tag: 'james-project-3.4.0', latest: true),
        new TagOnRepo(repo: 'linagora/james-project', tag: 'openpaas-1.4.8'),
        new TagOnRepo(repo: 'linagora/james-project', tag: 'openpaas-1.5.1'),
        new TagOnRepo(repo: 'linagora/james-project', tag: 'openpaas-1.6.0-rc1')
]

tagsToBuild.each {
    def tagOnRepo = it
    def repository = 'https://github.com/' + tagOnRepo.repo
   
    job("build tag ${tagOnRepo.repo} ${tagOnRepo.tag}".replaceAll(/\//, '.')) {
        githubProjectUrl(repository)
        scm {
            git {
                remote {
                    url(repository + '.git')
                }
                branch('refs/tags/' + tagOnRepo.tag)
            }
        }
        steps {
            downstreamParameterized {
                trigger('workflow', 'ALWAYS', false,
                    [buildStepFailure: 'FAILURE',
                     failure         : 'FAILURE',
                     unstable        : 'UNSTABLE']) {
                    predefinedProps([repoURL: repository, tagName: tagOnRepo.tag, originalBranch: "", isLatest: tagOnRepo.latest])
                }
            }
        }
    }
}
