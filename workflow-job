import java.util.List
import java.util.ArrayList
import java.util.UUID
import org.kohsuke.github.GitHub
import org.kohsuke.github.GHCommitState
import org.kohsuke.github.GHRepository

// This script must be called with
// $branch parameter: branch to build specified (used by git workflow-plugin command)
// $repoURL parameter: specifies the commiter GitHub repo URL
// $sha1 parameter: specifies the actual commit
// $version parameter: specifies the James version of the branch to build (only available when building a branch)
// $originalBranch: the branch used for merge (optional)

def hostname = 'james.linagora.com'
def maxRetries = 120
def author = extractUsername()
def authorParentURL = "https://github.com/${author}/james-project.git"
def repoName = extractRepoName()

// Not given optional parameters are set to null
def propertyMissing(String name) { null }

public String extractUsername() {
    return "${repoURL}".split('/')[3];
}

public String extractRepoName() {
    return "${repoURL}".split('/')[4].split('\\.')[0];
}

public class CommitStatuses implements Serializable {
    def commitStatuses;

    public CommitStatuses() {
        commitStatuses = new ArrayList<CommitStatus>();
    }

    public void addPendingStatus(CommitStatus status) {
        commitStatuses.add(status);
        status.pending();
    }

    public void failPendingStatuses() {
        for (CommitStatus status : commitStatuses) {
            if (status.state.equals("PENDING")) {
                status.failure();
            }
        }
    }
}

public class CommitStatusFactory implements Serializable {

    private final String repoName;
    private final String sha1;
    private int stepNumber = 0;

    public CommitStatusFactory(String repoName, String sha1) {
        this.repoName = repoName;
        this.sha1 = sha1;
    }

    public CommitStatus from(String description) {
        stepNumber++;
        return new CommitStatus(repoName, sha1, description, stepNumber);
    }
}

public class CommitStatus implements Serializable {
    def repoName;
    def sha1;
    def description;
    def context;
    def state;

    public CommitStatus(String repoName, String sha1, String description, int stepNumber) {
        this.repoName = repoName;
        this.sha1 = sha1;
        this.description = description;
        this.context = "workflow-job step " + stepNumber;
    }

    def pending() { createPendingCommitStatus(); }
    def success() { createSuccessCommitStatus(); }
    def failure() { createFailureCommitStatus(); }

    private void createPendingCommitStatus() {
        createCommitStatus("PENDING");
    }

    private void createSuccessCommitStatus() {
        createCommitStatus("SUCCESS");
    }

    private void createFailureCommitStatus() {
        createCommitStatus("FAILURE");
    }

    @NonCPS
    private GHRepository getRepository(String repoName) {
        return GitHub.connectUsingOAuth(System.getenv("GITHUB_TOKEN")).getRepository("linagora/" + repoName);
    }

    @NonCPS
    private void createCommitStatus(String state) {
        this.state = state;
        if (sha1 != null) {
            getRepository(repoName).createCommitStatus(sha1, GHCommitState.valueOf(state), null, description, context);
        }
    }
}

public class Images implements Serializable {
    def cassandra = 'cassandra:3.11.3'
    def elasticSearch = 'elasticsearch:2.4.6'
    def rabbitmq = "rabbitmq:3.7.7-management"
    def swift = "linagora/openstack-keystone-swift:pike"
    def buildId;
    def jamesCompile;
    def jamesCassandra;
    def jamesCassandraRabbitMQ;
    def jamesCassandraRabbitMQLdap;
    def jamesCassandraLdap;
    def jamesJPA;
    def jamesJpaSample;
    def jamesJpaSampleForTesting;
    def jamesSpring;
    def gitPublish;

    public Images(String buildId) {
        jamesCompile = 'james-parent-compile-' + buildId;
        jamesCassandra = 'james-server-cassandra-' + buildId;
        jamesCassandraRabbitMQ = 'james-server-cassandra-rabbitmq-' + buildId;
        jamesCassandraRabbitMQLdap = 'james-server-cassandra-rabbitmq-ldap-' + buildId;
        jamesCassandraLdap = 'james-server-cassandra-ldap-' + buildId;
        jamesJPA = 'james-server-jpa-' + buildId;
        jamesJpaSample = 'james-server-jpa-sample-' + buildId;
        jamesJpaSampleForTesting = 'james-server-jpa-sample-testing' + buildId;
        jamesSpring = 'james-server-spring-' + buildId;
        gitPublish = 'git/publish-' + buildId;
    }
}

public class Containers implements Serializable {
    def keystore = 'keystore';
    def keys = 'keys';
    def cassandra;
    def elasticSearch;
    def rabbitmq;
    def swift;
    def integrationCassandraRabbitMQ;
    def integrationCassandra;
    def integrationJPA;
    def integrationSpring;
    def jamesCompile;
    def jamesTest;
    def jamesCassandra;
    def jamesCassandraRabbitMQ;
    def jamesCassandraLdap;
    def jamesJPA;
    def jamesJpaSampleForTesting;
    def jamesSpring;
    def gitPublish;

    public Containers(String buildId) {
        cassandra = 'cassandra-' + buildId;
        elasticSearch = 'elasticSearch-' + buildId;
        rabbitmq = 'rabbitmq-' + buildId;
        swift = 'swift-' + buildId;
        integrationCassandraRabbitMQ = 'integration-cassandra-rabbitmq-' + buildId;
        integrationCassandra = 'integration-cassandra-' + buildId;
        integrationJPA = 'integration-jpa-' + buildId;
        integrationSpring = 'integration-spring-' + buildId;
        jamesCompile = 'james-parent-compile-' + buildId;
        jamesTest = 'james-parent-test-' + buildId;
        jamesCassandra = 'james-server-cassandra-' + buildId;
        jamesCassandraRabbitMQ = 'james-server-cassandra-rabbitmq-' + buildId;
        jamesCassandraLdap = 'james-server-cassandra-ldap-' + buildId;
        jamesJPA = 'james-server-jpa-' + buildId;
        jamesJpaSampleForTesting = 'james-server-jpa-sample-testing' + buildId;
        jamesSpring = 'james-server-spring-' + buildId;
        gitPublish = 'git-publish-' + buildId;
    }
}

def jarPathCassandra = '/cassandra/destination/james-server-cassandra-guice.jar'
def libPathCassandra = '/cassandra/destination/james-server-cassandra-guice.lib'
def jarPathCassandraLdap = '/cassandra/destination/james-server-cassandra-ldap-guice.jar'
def libPathCassandraLdap = '/cassandra/destination/james-server-cassandra-ldap-guice.lib'
def cliJarPathCassandra = '/cassandra/destination/james-server-cli.jar'
def clilibPathCassandra = '/cassandra/destination/james-server-cli.lib'

def jarPathCassandraRabbitMQ = '/cassandra-rabbitmq/destination/james-server-cassandra-rabbitmq-guice.jar'
def libPathCassandraRabbitMQ = '/cassandra-rabbitmq/destination/james-server-cassandra-rabbitmq-guice.lib'
def cliJarPathCassandraRabbitMQ = '/cassandra-rabbitmq/destination/james-server-cli.jar'
def clilibPathCassandraRabbitMQ = '/cassandra-rabbitmq/destination/james-server-cli.lib'

def jarPathCassandraRabbitMQLdap = '/cassandra-rabbitmq-ldap/destination/james-server-cassandra-rabbitmq-ldap-guice.jar'
def libPathCassandraRabbitMQLdap = '/cassandra-rabbitmq-ldap/destination/james-server-cassandra-rabbitmq-ldap-guice.lib'
def cliJarPathCassandraRabbitMQLdap = '/cassandra-rabbitmq-ldap/destination/james-server-cli.jar'
def clilibPathCassandraRabbitMQLdap = '/cassandra-rabbitmq-ldap/destination/james-server-cli.lib'

def jarPathJPA = '/jpa/destination/james-server-jpa-guice.jar'
def libPathJPA = '/jpa/destination/james-server-jpa-guice.lib'
def cliJarPathJPA = '/jpa/destination/james-server-cli.jar'
def clilibPathJPA = '/jpa/destination/james-server-cli.lib'

def jamesVersion = jamesVersion()
def zipPath = "/spring/destination/james-server-app-${jamesVersion}-app.zip"
def keystorePath = '/keys/keystore'
def jamesCliWithOptions = 'java -jar /root/james-cli.jar -h 127.0.0.1'
def jamesCliWithOptionsSpring = "/root/james-server-app-${jamesVersion}/bin/james-cli.sh -h 127.0.0.1 -p 9999"
def useMavenCache = '-v maven-cache-volume:/root/.m2'

private String jamesVersion() {
    if (version == null) {
        return "3.3.0-SNAPSHOT";
    }
    return "${version}";
}

def executeCommand (command) {
    try {
        sh "${command}"
    } catch (Exception e) {
        echo "Error executing ${command} : ${e.getMessage()}"
        e.printStackTrace();
    }
}
def deleteImage = { name -> executeCommand("docker rmi --force=true ${name}") }
def deleteContainer = { name -> executeCommand("docker rm --force=true --volumes=true ${name}") }
def waitForCommandSuccess (command, maxRetries) {
    def tries = 0;
    while (tries++ < maxRetries) {
        try {
            sh command
            return true
        } catch (Exception e) {
            if (tries >= maxRetries) {
                throw new Exception("${} tries exceeded. ${command} failed.", e)
            }
            sh "sleep 1"
        }
    }
}

def setDockerHost(dockerHost) {
    env.DOCKER_HOST = "tcp://${dockerHost}:2376"
    env.DOCKER_CERT_PATH = '/keys/'
    env.DOCKER_TLS_VERIFY = 'TRUE'
}

def unsetDockerHost() {
    env.DOCKER_HOST = ""
    env.DOCKER_CERT_PATH = ""
    env.DOCKER_TLS_VERIFY = 'FALSE'
}

def flows = [:]

def sha1OrBranch = {
    if (sha1 == null) {
        return "${branch}";
    }
    return sha1;
}

def isMaster = {
    return sha1OrBranch() == 'master';
}

def isBranch = {
    return sha1 == null;
}

def tag = {
    if (isMaster()) {
        return "latest";
    }
    return "${branch}";
}

def dockerUser = {
    return System.getenv("DOCKER_USER");
}

def dockerPassword = {
    return System.getenv("DOCKER_PASSWORD");
}

def gitlabToken = {
    return System.getenv("GITLAB_TOKEN");
}

def publishToDocker = {
    return isBranch() && dockerUser() != null;
}

def partialBuild = {
    return !isBranch() && !isMaster();
}

def partialBuildEnvFunction = {
    if (partialBuild()) {
        def baseBranchEnv = "--env 'JAMES_PARTIAL_BUILD_BASE_BRANCH=origin/master'"
        def additionalOptions = "--env 'MVN_ADDITIONAL_ARG_LINE=-Ppartial-build'"

        return "${baseBranchEnv} ${additionalOptions}"
    } else {
        return "";
    }
}

def partialBuildEnv = partialBuildEnvFunction();

def packagageOnGitlab = {
    return isMaster() && gitlabToken() != null;
}

def isAlive(dockerContainer) {
    try {
        sh "docker inspect -f '{{.State.Status}}' ${dockerContainer} | grep running"
        return true;
    } catch (Exception e) {
        return false;
    }
}

def provisionDataForIntegrationTest(dockerContainer, jamesCliCmd) {
    sh "docker exec ${dockerContainer} ${jamesCliCmd} adddomain domain"
    sh "docker exec ${dockerContainer} ${jamesCliCmd} adduser imapuser@domain password"
}

def containerIp(dockerContainer) {
    return "`docker inspect -f '{{(index .NetworkSettings.IPAddress)}}' ${dockerContainer}`" 
}

flows["${sha1}"] = {

    def buildId = "${branch.toLowerCase()}-${UUID.randomUUID()}"
    def mergeBranch = "MERGE-${buildId}"
    def images = new Images(buildId);
    def containers = new Containers(buildId);
    def jamesLinks = "--link ${containers.cassandra}:cassandra --link ${containers.elasticSearch}:elasticsearch"
    def rabbitmqSwiftLinks = "--link ${containers.rabbitmq}:rabbitmq --link ${containers.swift}:swift"

    def sha1ToBuild = sha1OrBranch()
    def verbose = "-a stdout -a stderr"

    def statuses = new CommitStatuses();
    def commitStatusFactory = new CommitStatusFactory(repoName, sha1);
    def merging = commitStatusFactory.from("Merging");
    statuses.addPendingStatus(merging);

    def buildingJava8 = commitStatusFactory.from("Building java 8");
    statuses.addPendingStatus(buildingJava8);

    def testingJava8 = commitStatusFactory.from("Testing java 8");
    statuses.addPendingStatus(testingJava8);

    def dockeringGuiceCassandraRabbitMQLdap = commitStatusFactory.from("Dockering Guice Cassandra + RabbitMQ + Swift + Ldap");
    statuses.addPendingStatus(dockeringGuiceCassandraRabbitMQLdap);
    def dockeringGuiceCassandraRabbitMQ = commitStatusFactory.from("Dockering Guice Cassandra + RabbitMQ + Swift");
    statuses.addPendingStatus(dockeringGuiceCassandraRabbitMQ);
    def dockeringGuiceCassandra = commitStatusFactory.from("Dockering Guice Cassandra");
    statuses.addPendingStatus(dockeringGuiceCassandra);
    def dockeringGuiceJPA = commitStatusFactory.from("Dockering Guice JPA");
    statuses.addPendingStatus(dockeringGuiceJPA);
    def dockeringSpringJPA = commitStatusFactory.from("Dockering Spring JPA");
    statuses.addPendingStatus(dockeringSpringJPA);
    def dockeringGuiceCassandraLdap = commitStatusFactory.from("Building Guice Cassandra/Ldap");
    statuses.addPendingStatus(dockeringGuiceCassandraLdap);
    def dockeringGuiceJPASampleTesting = commitStatusFactory.from("Dockering Guice JPA with data provision");
    statuses.addPendingStatus(dockeringGuiceJPASampleTesting);

    def deployingGuiceCassandraRabbitMQ = commitStatusFactory.from("Deploying Guice Cassandra + RabbitMQ + Swift");
    statuses.addPendingStatus(deployingGuiceCassandraRabbitMQ);
    def deployingGuiceCassandra = commitStatusFactory.from("Deploying Guice Cassandra");
    statuses.addPendingStatus(deployingGuiceCassandra);
    def deployingGuiceJPA = commitStatusFactory.from("Deploying Guice JPA");
    statuses.addPendingStatus(deployingGuiceJPA);
    def deployingSpringJPA = commitStatusFactory.from("Deploying Spring JPA");
    statuses.addPendingStatus(deployingSpringJPA);
    def deployingGuiceJPASampleTesting = commitStatusFactory.from("Deploying Guice JPA with data provision");
    statuses.addPendingStatus(deployingGuiceJPASampleTesting);

    def testingGuiceCassandraRabbitMQ = commitStatusFactory.from("Integrating Guice Cassandra  + RabbitMQ + Swift");
    statuses.addPendingStatus(testingGuiceCassandraRabbitMQ);
    def testingGuiceCassandra = commitStatusFactory.from("Integrating Guice Cassandra");
    statuses.addPendingStatus(testingGuiceCassandra);
    def testingGuiceJPA = commitStatusFactory.from("Integrating Guice JPA");
    statuses.addPendingStatus(testingGuiceJPA);
    def testingSpringJPA = commitStatusFactory.from("Integrating Spring JPA");
    statuses.addPendingStatus(testingSpringJPA);

    def publishing;
    def deployAndValidatingBuilder = [:]
    if (publishToDocker()) {
        publishing = commitStatusFactory.from("Publishing");
        statuses.addPendingStatus(publishing);
    }
    def packagingTrigger;
    if (packagageOnGitlab()) {
        packagingTrigger = commitStatusFactory.from("Triggering packaging");
        statuses.addPendingStatus(packagingTrigger);
    }

    stage "Build"
    node('remote') {
        ws("/home/jenkins/build/workspace/${env.BUILD_NUMBER}") {
        try {
            //perform merge
            git url: authorParentURL, branch: branch
            sh "docker build --tag ${images.gitPublish} -f dockerfiles/merge/Dockerfile ."
            sh "docker run ${verbose} -t --name ${containers.gitPublish} -v /origin ${images.gitPublish} ${sha1ToBuild} ${mergeBranch} ${originalBranch}"
            merging.success();

            //Building with tests
            sh "docker build --tag=${images.jamesCompile} dockerfiles/compilation/java-8"

            def tmpfsOptions = '--tmpfs=/tmp:rw,exec,size=1g --tmpfs=/james-project:rw,size=4g'
            def dockerVolume = '-v /var/run/docker.sock:/var/run/docker.sock'
            def destinationVolumes = '--volume=/jpa/destination --volume=/cassandra/destination --volume=/spring/destination --volume=/cassandra-rabbitmq/destination'
            def allVolumes = "${dockerVolume} --volumes-from=${containers.keys} ${useMavenCache} --volumes-from=${containers.gitPublish} ${destinationVolumes}"
            def compileNameDefinitions = "--name=${containers.jamesCompile}"
            def testNameDefinitions = "--name=${containers.jamesTest}"

            sh "cd dockerfiles/; docker run ${verbose} ${tmpfsOptions} ${useMavenCache} --volumes-from=${containers.gitPublish} ${compileNameDefinitions} --env 'MVN_ADDITIONAL_ARG_LINE=-T 1C' ${images.jamesCompile} -s ${mergeBranch}"
            buildingJava8.success();

            sh "cd dockerfiles/; docker run ${verbose} ${tmpfsOptions} ${allVolumes} ${testNameDefinitions} ${partialBuildEnv} ${images.jamesCompile} ${mergeBranch}"
            testingJava8.success();

            //Dockering Guice Server with Cassandra + RabbitMQ + Swift + Ldap
            sh "cd dockerfiles/run/guice/cassandra-rabbitmq-ldap; docker cp ${containers.keystore}:${keystorePath} destination/conf"
            sh "cd dockerfiles/run/guice/cassandra-rabbitmq-ldap; docker cp ${containers.jamesTest}:${jarPathCassandraRabbitMQLdap} destination"
            sh "cd dockerfiles/run/guice/cassandra-rabbitmq-ldap; docker cp ${containers.jamesTest}:${libPathCassandraRabbitMQLdap} destination"
            sh "cd dockerfiles/run/guice/cassandra-rabbitmq-ldap; docker cp ${containers.jamesTest}:${cliJarPathCassandraRabbitMQLdap} destination"
            sh "cd dockerfiles/run/guice/cassandra-rabbitmq-ldap; docker cp ${containers.jamesTest}:${clilibPathCassandraRabbitMQLdap} destination"

            sh "cd dockerfiles/run/guice/cassandra-rabbitmq-ldap; docker build --tag=${images.jamesCassandraRabbitMQLdap} ."

            dockeringGuiceCassandraRabbitMQLdap.success()

            //Deploying Guice Server with Cassandra + RabbitMQ + Swift
            sh "cd dockerfiles/run/guice/cassandra-rabbitmq; docker cp ${containers.keystore}:${keystorePath} destination/conf"
            sh "cd dockerfiles/run/guice/cassandra-rabbitmq; docker cp ${containers.jamesTest}:${jarPathCassandraRabbitMQ} destination"
            sh "cd dockerfiles/run/guice/cassandra-rabbitmq; docker cp ${containers.jamesTest}:${libPathCassandraRabbitMQ} destination"
            sh "cd dockerfiles/run/guice/cassandra-rabbitmq; docker cp ${containers.jamesTest}:${cliJarPathCassandraRabbitMQ} destination"
            sh "cd dockerfiles/run/guice/cassandra-rabbitmq; docker cp ${containers.jamesTest}:${clilibPathCassandraRabbitMQ} destination"

            sh "docker run --detach=true --name=${containers.cassandra} ${images.cassandra}"
            sh "docker run --detach=true --name=${containers.elasticSearch} ${images.elasticSearch}"
            sh "docker run --detach=true --name=${containers.rabbitmq} ${images.rabbitmq}"
            sh "docker run --detach=true --name=${containers.swift} ${images.swift}"
            try {
                waitForCommandSuccess("docker exec ${containers.cassandra} cqlsh -e 'describe columnfamily system.local;'", maxRetries)
            } catch (Exception e) {
                sh "docker logs ${containers.cassandra}"
            }
            sh "cd dockerfiles/run/guice/cassandra-rabbitmq; docker build --tag=${images.jamesCassandraRabbitMQ} ."

            dockeringGuiceCassandraRabbitMQ.success()

            sh "docker run --detach=true --name=${containers.jamesCassandraRabbitMQ} --hostname ${hostname} --expose=143 --publish-all=true ${jamesLinks} ${rabbitmqSwiftLinks} ${images.jamesCassandraRabbitMQ}"

            echo 'Waiting for James server to be deployed'
            try {
                waitForCommandSuccess("docker exec ${containers.jamesCassandraRabbitMQ} ${jamesCliWithOptions} listusers", maxRetries)
            } catch (Exception e) {
                sh "docker logs ${containers.jamesCassandraRabbitMQ}"
            }

            deployingGuiceCassandraRabbitMQ.success();
            //Configuring James Server on Cassandra
            provisionDataForIntegrationTest("${containers.jamesCassandraRabbitMQ}", "${jamesCliWithOptions}")

            echo "Running integration tests on Cassandra + RabbitMQ + Swift on ${buildId}"
            def jamesCassandraRabbitMQIp = containerIp("${containers.jamesCassandraRabbitMQ}")
            sh "docker run ${verbose} --name=${containers.integrationCassandraRabbitMQ} --entrypoint=\"/root/integration_tests.sh\" ${useMavenCache} --volumes-from=${containers.gitPublish} ${images.jamesCompile} ${jamesCassandraRabbitMQIp} 143 ${sha1ToBuild}"

            testingGuiceCassandraRabbitMQ.success();

            //Deploying Guice Server with Cassandra
            sh "cd dockerfiles/run/guice/cassandra; docker cp ${containers.keystore}:${keystorePath} destination/conf"
            sh "cd dockerfiles/run/guice/cassandra; docker cp ${containers.jamesTest}:${jarPathCassandra} destination"
            sh "cd dockerfiles/run/guice/cassandra; docker cp ${containers.jamesTest}:${libPathCassandra} destination"
            sh "cd dockerfiles/run/guice/cassandra; docker cp ${containers.jamesTest}:${cliJarPathCassandra} destination"
            sh "cd dockerfiles/run/guice/cassandra; docker cp ${containers.jamesTest}:${clilibPathCassandra} destination"
            sh "cd dockerfiles/run/guice/cassandra; docker build --tag=${images.jamesCassandra} ."
            dockeringGuiceCassandra.success()

            sh "docker rm --force --volumes ${containers.cassandra}"
            sh "docker rm --force --volumes ${containers.elasticSearch}"
            sh "docker run --detach=true --name=${containers.cassandra} ${images.cassandra}"
            sh "docker run --detach=true --name=${containers.elasticSearch} ${images.elasticSearch}"
            try {
                waitForCommandSuccess("docker exec ${containers.cassandra} cqlsh -e 'describe columnfamily system.local;'", maxRetries)
            } catch (Exception e) {
                sh "docker logs ${containers.cassandra}"
            }
            sh "docker run --detach=true --name=${containers.jamesCassandra} --hostname ${hostname} --expose=143 --publish-all=true ${jamesLinks} ${images.jamesCassandra}"

            echo 'Waiting for James server to be deployed'
            try {
                waitForCommandSuccess("docker exec ${containers.jamesCassandra} ${jamesCliWithOptions} listusers", maxRetries)
            } catch (Exception e) {
                sh "docker logs ${containers.jamesCassandra}"
            }

            deployingGuiceCassandra.success();
            //Configuring James Server on Cassandra
            provisionDataForIntegrationTest("${containers.jamesCassandra}", "${jamesCliWithOptions}")

            echo "Running integration tests on Cassandra on ${buildId}"
            def jamesCassandraIp = containerIp("${containers.jamesCassandra}")
            sh "docker run ${verbose} --name=${containers.integrationCassandra} --entrypoint=\"/root/integration_tests.sh\" ${useMavenCache} --volumes-from=${containers.gitPublish} ${images.jamesCompile} ${jamesCassandraIp} 143 ${sha1ToBuild}"

            testingGuiceCassandra.success();

            //Deploying Guice Server with JPA
            sh "cd dockerfiles/run/guice/jpa; docker cp ${containers.keystore}:${keystorePath} destination/conf"
            sh "cd dockerfiles/run/guice/jpa; docker cp ${containers.jamesTest}:${jarPathJPA} destination"
            sh "cd dockerfiles/run/guice/jpa; docker cp ${containers.jamesTest}:${libPathJPA} destination"
            sh "cd dockerfiles/run/guice/jpa; docker cp ${containers.jamesTest}:${cliJarPathJPA} destination"
            sh "cd dockerfiles/run/guice/jpa; docker cp ${containers.jamesTest}:${clilibPathJPA} destination"

            sh "cd dockerfiles/run/guice/jpa; docker build --tag=${images.jamesJPA} ."

            dockeringGuiceJPA.success()

            sh "docker run --detach=true --name=${containers.jamesJPA} --hostname ${hostname} --expose=143 --publish-all=true ${images.jamesJPA}"

            echo 'Waiting for James server to be deployed'
            try {
                waitForCommandSuccess("docker exec ${containers.jamesJPA} ${jamesCliWithOptions} listusers", maxRetries)
            } catch (Exception e) {
                sh "docker logs ${containers.jamesJPA}"
            }

            deployingGuiceJPA.success();

            //Configuring James Server on JPA
            provisionDataForIntegrationTest("${containers.jamesJPA}", "${jamesCliWithOptions}")

            echo "Running integration tests on JPA on ${buildId}"
            def jamesJPAIp = containerIp("${containers.jamesJPA}")
            sh "docker run ${verbose} --name=${containers.integrationJPA} --entrypoint=\"/root/integration_tests.sh\" ${useMavenCache} --volumes-from=${containers.gitPublish} ${images.jamesCompile} ${jamesJPAIp} 143 ${sha1ToBuild}"

            testingGuiceJPA.success();

            //Deploying James Server with Spring + JPA
            sh "cd dockerfiles/run/spring; docker cp ${containers.keystore}:${keystorePath} destination/conf"
            sh "cd dockerfiles/run/spring; docker cp ${containers.jamesTest}:${zipPath} destination"

            sh "cd dockerfiles/run/spring; docker build --tag=${images.jamesSpring} ."

            dockeringSpringJPA.success()

            sh "docker run --detach=true --name=${containers.jamesSpring} --hostname ${hostname} --expose=143 --publish-all=true ${images.jamesSpring}"

            echo 'Waiting for James server to be deployed'
            try {
                waitForCommandSuccess("docker exec ${containers.jamesSpring} ${jamesCliWithOptionsSpring} listusers", maxRetries)
            } catch (Exception e) {
                sh "docker logs ${containers.jamesSpring}"
            }
            deployingSpringJPA.success();

            //Configuring James Server on Spring + JPA
            sh "docker exec ${containers.jamesSpring} ${jamesCliWithOptionsSpring} adddomain domain"
            sh "docker exec ${containers.jamesSpring} ${jamesCliWithOptionsSpring} adduser imapuser@domain password"

            echo "Running integration tests on ${buildId}"
            def jamesSpringIp = containerIp("${containers.jamesSpring}")
            sh "docker run ${verbose} --name=${containers.integrationSpring} --entrypoint=\"/root/integration_tests.sh\" ${useMavenCache} --volumes-from=${containers.gitPublish} ${images.jamesCompile} ${jamesSpringIp} 143 ${sha1ToBuild}"

            testingSpringJPA.success();

            //"Building Guice Server with Cassandra/Ldap
            sh "cd dockerfiles/run/guice/cassandra-ldap; docker cp ${containers.keystore}:${keystorePath} destination/conf"
            sh "cd dockerfiles/run/guice/cassandra-ldap; docker cp ${containers.jamesTest}:${jarPathCassandraLdap} destination"
            sh "cd dockerfiles/run/guice/cassandra-ldap; docker cp ${containers.jamesTest}:${libPathCassandraLdap} destination"
            sh "cd dockerfiles/run/guice/cassandra-ldap; docker cp ${containers.jamesTest}:${cliJarPathCassandra} destination"
            sh "cd dockerfiles/run/guice/cassandra-ldap; docker cp ${containers.jamesTest}:${clilibPathCassandra} destination"

            sh "cd dockerfiles/run/guice/cassandra-ldap; docker build --tag=${images.jamesCassandraLdap} ."

            dockeringGuiceCassandraLdap.success()

            //Deploying Guice Server with JPA then provision data
            sh "cd dockerfiles/run/guice/provisioned; cp Dockerfile NewDockerfile; sed -i -- 's,linagora/james-jpa-guice,${images.jamesJPA},g' NewDockerfile"

            sh "cd dockerfiles/run/guice/provisioned; docker build --tag=${images.jamesJpaSampleForTesting} -f NewDockerfile ."

            dockeringGuiceJPASampleTesting.success()

            sh "docker run --detach=true --name=${containers.jamesJpaSampleForTesting} --hostname ${hostname} --expose=143 --publish-all=true ${images.jamesJpaSampleForTesting}"

            echo 'Waiting for James server to be deployed and provision data'
            try {
                waitForCommandSuccess("docker exec ${containers.jamesJpaSampleForTesting} ${jamesCliWithOptions} listusers", maxRetries)
            } catch (Exception e) {
                sh "docker logs ${containers.jamesJpaSampleForTesting}"
            }

            sh "cd dockerfiles/run/guice/provisioned; rm NewDockerfile"

            deployingGuiceJPASampleTesting.success();

            if (publishToDocker()) {

            //Publishing to Docker Hub
            def dUser = dockerUser();
            def dPassword = dockerPassword();
            def tagName = tag();
            sh "docker login -u ${dUser} -p ${dPassword}"

            sh "docker tag ${images.jamesCassandraRabbitMQLdap} linagora/james-cassandra-rabbitmq-ldap-project:${tagName}"
            sh "docker push linagora/james-cassandra-rabbitmq-ldap-project:${tagName}"

            sh "docker tag ${images.jamesCassandraRabbitMQ} linagora/james-rabbitmq-project:${tagName}"
            sh "docker push linagora/james-rabbitmq-project:${tagName}"

            sh "docker tag ${images.jamesCassandra} linagora/james-project:${tagName}"
            sh "docker push linagora/james-project:${tagName}"

            sh "docker tag ${images.jamesSpring} linagora/james-jpa-spring:${tagName}"
            sh "docker push linagora/james-jpa-spring:${tagName}"

            sh "docker tag ${images.jamesJPA} linagora/james-jpa-guice:${tagName}"
            sh "docker push linagora/james-jpa-guice:${tagName}"

            sh "docker tag ${images.jamesCassandraLdap} linagora/james-ldap-project:${tagName}"
            sh "docker push linagora/james-ldap-project:${tagName}"

            try {
                sh "cd dockerfiles/run/guice/provisioned; docker build --tag=${images.jamesJpaSample} ."

                sh "docker tag ${images.jamesJpaSample} linagora/james-jpa-sample:${tagName}"
                sh "docker push linagora/james-jpa-sample:${tagName}"
            } finally {
                deleteImage(images.jamesJpaSample)
            }

            publishing.success();

            }

            if (packagageOnGitlab()) {
                def gToken = gitlabToken();
                sh "curl -X POST -Ftoken=${gToken} -F'ref=master' -F'variables[REPO_NAME]=oncommit' -F'variables[SOURCE_REPO]=https://github.com/linagora/james-project' https://ci.linagora.com/api/v4/projects/803/trigger/pipeline"
                packagingTrigger.success();
            }
        } finally {
            //Cleaning everything
            deleteContainer(containers.gitPublish)
            deleteImage(images.gitPublish)

            deleteContainer(containers.jamesCompile)
            deleteContainer(containers.jamesTest)
            deleteImage(images.jamesCompile)

            deleteContainer(containers.cassandra)
            deleteContainer(containers.elasticSearch)
            deleteContainer(containers.rabbitmq)
            deleteContainer(containers.swift)

            deleteContainer(containers.jamesCassandraRabbitMQ)
            deleteContainer(containers.jamesCassandra)
            deleteContainer(containers.jamesCassandraLdap)
            deleteContainer(containers.jamesJPA)
            deleteContainer(containers.jamesJpaSampleForTesting)
            deleteContainer(containers.jamesSpring)
            deleteImage(images.jamesCassandraRabbitMQLdap)
            deleteImage(images.jamesCassandraRabbitMQ)
            deleteImage(images.jamesCassandra)
            deleteImage(images.jamesCassandraLdap)
            deleteImage(images.jamesJPA)
            deleteImage(images.jamesJpaSampleForTesting)
            deleteImage(images.jamesSpring)

            deleteContainer(containers.integrationCassandraRabbitMQ)
            deleteContainer(containers.integrationCassandra)
            deleteContainer(containers.integrationJPA)
            deleteContainer(containers.integrationSpring)

        }
        }
    }
    statuses.failPendingStatuses();
}

parallel flows
