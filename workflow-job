import java.util.List
import java.util.ArrayList
import java.util.UUID
import org.kohsuke.github.GitHub
import org.kohsuke.github.GHCommitState
import org.kohsuke.github.GHRepository

// This script must be called with
// $branch parameter : branch to build specified (used by git workflow-plugin command)
// $repoURL parameter : specifies the commiter GitHub repo URL
// $sha1 parameter : specifies the actual commit

def dockerIp = '62.210.100.33'
def continuousDeploymentDockerIp = '62.210.101.42'
def continuousDeploymentConfigurationPath = '/root/james/conf'
def hostname = 'james.linagora.com'
def maxRetries = 120
def author = extractUsername()
def authorParentURL = "https://github.com/${author}/james-project.git"
def repoName = extractRepoName()

// Not given optional parameters are set to null
def propertyMissing(String name) { null }

public String extractUsername() {
    return "${repoURL}".split('/')[3];
}

public String extractRepoName() {
    return "${repoURL}".split('/')[4].split('\\.')[0];
}

public class CommitStatuses implements Serializable {
    def commitStatuses;

    public CommitStatuses() {
        commitStatuses = new ArrayList<CommitStatus>();
    }

    public void addPendingStatus(CommitStatus status) {
        commitStatuses.add(status);
        status.pending();
    }

    public void failPendingStatuses() {
        for (CommitStatus status : commitStatuses) {
            if (status.state.equals("PENDING")) {
                status.failure();
            }
        }
    }
}

public class CommitStatusFactory implements Serializable {

  private final String repoName;
  private final String sha1;
  private int stepNumber = 0;

  public CommitStatusFactory(String repoName, String sha1) {
    this.repoName = repoName;
    this.sha1 = sha1;
  }

  public CommitStatus from(String description) {
    stepNumber++;
    return new CommitStatus(repoName, sha1, description, stepNumber);
  }
}

public class CommitStatus implements Serializable {
    def repoName;
    def sha1;
    def description;
    def context;
    def state;

    public CommitStatus(String repoName, String sha1, String description, int stepNumber) {
        this.repoName = repoName;
        this.sha1 = sha1;
        this.description = description;
        this.context = "workflow-job step " + stepNumber;
    }

    def pending() { createPendingCommitStatus(); }
    def success() { createSuccessCommitStatus(); }
    def failure() { createFailureCommitStatus(); }

    private void createPendingCommitStatus() {
        createCommitStatus("PENDING");
    }

    private void createSuccessCommitStatus() {
        createCommitStatus("SUCCESS");
    }

    private void createFailureCommitStatus() {
        createCommitStatus("FAILURE");
    }

    @NonCPS
    private GHRepository getRepository(String repoName) {
        return GitHub.connectUsingOAuth(System.getenv("GITHUB_TOKEN")).getRepository("linagora/" + repoName);
    }

    @NonCPS
    private void createCommitStatus(String state) {
        this.state = state;
        if (sha1 != null) {
                getRepository(repoName).createCommitStatus(sha1, GHCommitState.valueOf(state), null, description, context);
        }
    }
}

public class Images implements Serializable {
    def cassandra = 'cassandra:2.2.3'
    def elasticSearch = 'elasticsearch:2.2.1'
    def buildId;
    def jamesCompile;
    def jamesCassandra;
    def jamesCassandraLdap;
    def jamesJPA;
    def jamesJpaSample;
    def jamesJpaSampleForTesting;
    def jamesSpring;
    def gitPublish;

    public Images(String buildId) {
        jamesCompile = 'james-parent-compile-' + buildId;
        jamesCassandra = 'james-server-cassandra-' + buildId;
        jamesCassandraLdap = 'james-server-cassandra-ldap-' + buildId;
        jamesJPA = 'james-server-jpa-' + buildId;
        jamesJpaSample = 'james-server-jpa-sample-' + buildId;
        jamesJpaSampleForTesting = 'james-server-jpa-sample-testing' + buildId;
        jamesSpring = 'james-server-spring-' + buildId;
        gitPublish = 'git/publish-' + buildId;
    }
}

public class Containers implements Serializable {
    def keystore = 'keystore';
    def keys = 'keys';
    def cassandra;
    def elasticSearch;
    def integrationCassandra;
    def integrationJPA;
    def integrationSpring;
    def jamesCompile;
    def jamesCassandra;
    def jamesCassandraLdap;
    def jamesJPA;
    def jamesJpaSampleForTesting;
    def jamesSpring;
    def gitPublish;

    public Containers(String buildId) {
        cassandra = 'cassandra-' + buildId;
        elasticSearch = 'elasticSearch-' + buildId;
        integrationCassandra = 'integration-cassandra-' + buildId;
        integrationJPA = 'integration-jpa-' + buildId;
        integrationSpring = 'integration-spring-' + buildId;
        jamesCompile = 'james-parent-compile-' + buildId;
        jamesCassandra = 'james-server-cassandra-' + buildId;
        jamesCassandraLdap = 'james-server-cassandra-ldap-' + buildId;
        jamesJPA = 'james-server-jpa-' + buildId;
        jamesJpaSampleForTesting = 'james-server-jpa-sample-testing' + buildId;
        jamesSpring = 'james-server-spring-' + buildId;
        gitPublish = 'git-publish-' + buildId;
    }
}

def jarPathCassandra = '/cassandra/destination/james-server-cassandra-guice.jar'
def libPathCassandra = '/cassandra/destination/james-server-cassandra-guice.lib'
def jarPathCassandraLdap = '/cassandra/destination/james-server-cassandra-ldap-guice.jar'
def libPathCassandraLdap = '/cassandra/destination/james-server-cassandra-ldap-guice.lib'
def cliJarPathCassandra = '/cassandra/destination/james-server-cli.jar'
def clilibPathCassandra = '/cassandra/destination/james-server-cli.lib'

def jarPathJPA = '/jpa/destination/james-server-jpa-guice.jar'
def libPathJPA = '/jpa/destination/james-server-jpa-guice.lib'
def cliJarPathJPA = '/jpa/destination/james-server-cli.jar'
def clilibPathJPA = '/jpa/destination/james-server-cli.lib'

def zipPath = '/spring/destination/james-server-app-3.1.0-SNAPSHOT-app.zip'

def keystorePath = '/keys/keystore'
def jamesCliWithOptions = 'java -jar /root/james-cli.jar -h 127.0.0.1'
def jamesCliWithOptionsSpring = '/root/james-server-app-3.1.0-SNAPSHOT/bin/james-cli.sh -h 127.0.0.1 -p 9999'
def useMavenCache = '-v maven-cache-volume:/root/.m2'

def executeCommand (command) {
   try {
       sh "${command}"
   } catch (Exception e) {
       echo "Error executing ${command} : ${e.getMessage()}"
       e.printStackTrace();
   }
}
def deleteImage = { name -> executeCommand("docker rmi --force=true ${name}") }
def deleteContainer = { name -> executeCommand("docker rm --force=true --volumes=true ${name}") }
def waitForCommandSuccess (command, maxRetries) {
    def tries = 0;
    while (tries++ < maxRetries) {
        try {
            sh command
            return true
        } catch (Exception e) {
            if (tries >= maxRetries) {
                throw new Exception("${} tries exceeded. ${command} failed.", e)
            }
            sh "sleep 1"
        }
    }
}

env.DOCKER_CERT_PATH = '/keys/'
env.DOCKER_TLS_VERIFY = 'TRUE'

def setDockerHost(dockerHost) {
   env.DOCKER_HOST = "tcp://${dockerHost}:2376"
}

def flows = [:]

def sha1OrBranch = {
    if (sha1 == null) {
        return "${branch}";
    }
    return sha1;
}

def isMaster = {
    return sha1OrBranch() == 'master';
}

def dockerUser = {
    return System.getenv("DOCKER_USER");
}

def dockerPassword = {
    return System.getenv("DOCKER_PASSWORD");
}

def publishToDocker = {
    return isMaster() && dockerUser() != null;
}

def isAlive(dockerContainer) {
   try {
       sh "docker inspect -f '{{.State.Status}}' ${dockerContainer} | grep running"
       return true;
   } catch (Exception e) {
       return false;
   }
}

def provisionDataForIntegrationTest(dockerContainer, jamesCliCmd) {
    sh "docker exec ${dockerContainer} ${jamesCliCmd} adddomain domain"
    sh "docker exec ${dockerContainer} ${jamesCliCmd} adduser imapuser@domain password"
}

def findImapPortCmd(dockerContainer) {
  return "export JAMES_PORT=`docker inspect -f '{{(index (index .NetworkSettings.Ports \"143/tcp\") 0).HostPort}}' ${dockerContainer}`"
}

flows["${sha1}"] = {
    setDockerHost(dockerIp)
    def buildId = "${branch.toLowerCase()}-${UUID.randomUUID()}"
    def mergeBranch = "MERGE-${buildId}"
    def images = new Images(buildId);
    def containers = new Containers(buildId);
    def jamesLinks = "--link ${containers.cassandra}:cassandra --link ${containers.elasticSearch}:elasticsearch"

    def findImapPortCassandra = findImapPortCmd("${containers.jamesCassandra}")
    def findImapPortJPA = findImapPortCmd("${containers.jamesJPA}")
    def findImapPortSpring = findImapPortCmd("${containers.jamesSpring}")

    def sha1ToBuild = sha1OrBranch()
    def integrationArguments = "${dockerIp} \$JAMES_PORT ${sha1ToBuild}"
    def verbose = "-a stdout -a stderr"
    def dockerEnv = "--env=DOCKER_HOST=${env.DOCKER_HOST} --env=DOCKER_CERT_PATH=${env.DOCKER_CERT_PATH} --env=DOCKER_TLS_VERIFY=TRUE"

    def statuses = new CommitStatuses();
    def commitStatusFactory = new CommitStatusFactory(repoName, sha1);
    def merging = commitStatusFactory.from("Merging");
    statuses.addPendingStatus(merging);

    def buildingJava8 = commitStatusFactory.from("Building java 8");
    statuses.addPendingStatus(buildingJava8);

    def dockeringGuiceCassandra = commitStatusFactory.from("Dockering Guice Cassandra");
    statuses.addPendingStatus(dockeringGuiceCassandra);
    def dockeringGuiceJPA = commitStatusFactory.from("Dockering Guice JPA");
    statuses.addPendingStatus(dockeringGuiceJPA);
    def dockeringSpringJPA = commitStatusFactory.from("Dockering Spring JPA");
    statuses.addPendingStatus(dockeringSpringJPA);
    def dockeringGuiceCassandraLdap = commitStatusFactory.from("Building Guice Cassandra/Ldap");
    statuses.addPendingStatus(dockeringGuiceCassandraLdap);
    def dockeringGuiceJPASampleTesting = commitStatusFactory.from("Dockering Guice JPA with data provision");
    statuses.addPendingStatus(dockeringGuiceJPASampleTesting);

    def deployingGuiceCassandra = commitStatusFactory.from("Deploying Guice Cassandra");
    statuses.addPendingStatus(deployingGuiceCassandra);
    def deployingGuiceJPA = commitStatusFactory.from("Deploying Guice JPA");
    statuses.addPendingStatus(deployingGuiceJPA);
    def deployingSpringJPA = commitStatusFactory.from("Deploying Spring JPA");
    statuses.addPendingStatus(deployingSpringJPA);
    def deployingGuiceJPASampleTesting = commitStatusFactory.from("Deploying Guice JPA with data provision");
    statuses.addPendingStatus(deployingGuiceJPASampleTesting);

    def testingGuiceCassandra = commitStatusFactory.from("Integrating Guice Cassandra");
    statuses.addPendingStatus(testingGuiceCassandra);
    def testingGuiceJPA = commitStatusFactory.from("Integrating Guice JPA");
    statuses.addPendingStatus(testingGuiceJPA);
    def testingSpringJPA = commitStatusFactory.from("Integrating Spring JPA");
    statuses.addPendingStatus(testingSpringJPA);

    def publishing;
    def continuousDeployment;
    def deployAndValidatingBuilder = [:]
    if (publishToDocker()) {
        publishing = commitStatusFactory.from("Publishing");
        statuses.addPendingStatus(publishing);
        continuousDeployment = commitStatusFactory.from("Continuous Deployment");
        statuses.addPendingStatus(continuousDeployment);
    }

    try {
        stage "Perform Merge"
        node {
            git url: authorParentURL, branch: branch
            sh "docker build --tag ${images.gitPublish} -f dockerfiles/merge/Dockerfile ."
            sh "docker run ${verbose} -t --name ${containers.gitPublish} -v /origin ${images.gitPublish} ${sha1ToBuild} ${mergeBranch}"
            merging.success();
        }
        stage "Building ${buildId}"
        node {
            sh "docker build --tag=${images.jamesCompile} dockerfiles/compilation/java-8"
            sh "cd dockerfiles/; docker run ${verbose} --tmpfs=/tmp:rw,exec,size=1g --tmpfs=/james-project:rw,size=4g --name=${containers.jamesCompile} ${dockerEnv} ${useMavenCache} -e DOCKER_CONTAINER=${containers.jamesCompile} --volumes-from=${containers.keys} --volumes-from=${containers.gitPublish} --volume=/jpa/destination --volume=/cassandra/destination --volume=/spring/destination ${images.jamesCompile} ${mergeBranch}"

            buildingJava8.success();
        }

        
        stage "Deploying Guice Server with Cassandra ${buildId}"
        node {
            sh "cd dockerfiles/run/guice/cassandra; docker cp ${containers.keystore}:${keystorePath} destination/conf"
            sh "cd dockerfiles/run/guice/cassandra; docker cp ${containers.jamesCompile}:${jarPathCassandra} destination"
            sh "cd dockerfiles/run/guice/cassandra; docker cp ${containers.jamesCompile}:${libPathCassandra} destination"
            sh "cd dockerfiles/run/guice/cassandra; docker cp ${containers.jamesCompile}:${cliJarPathCassandra} destination"
            sh "cd dockerfiles/run/guice/cassandra; docker cp ${containers.jamesCompile}:${clilibPathCassandra} destination"

            sh "docker run --detach=true --name=${containers.cassandra} ${images.cassandra}"
            try {
                waitForCommandSuccess("docker exec ${containers.cassandra} cqlsh -e 'describe columnfamily system.local;'", maxRetries)
            } catch (Exception e) {
                sh "docker logs ${containers.cassandra}"
            }
            sh "docker run --detach=true --name=${containers.elasticSearch} ${images.elasticSearch}"
            sh "cd dockerfiles/run/guice/cassandra; docker build --tag=${images.jamesCassandra} ."

            dockeringGuiceCassandra.success()

            sh "docker run --detach=true --name=${containers.jamesCassandra} --hostname ${hostname} --expose=143 --publish-all=true ${jamesLinks} ${images.jamesCassandra}"

            echo 'Waiting for James server to be deployed'
            try {
                waitForCommandSuccess("docker exec ${containers.jamesCassandra} ${jamesCliWithOptions} listusers", maxRetries)
            } catch (Exception e) {
                sh "docker logs ${containers.jamesCassandra}"
            }

            deployingGuiceCassandra.success();
        }
        stage "Configuring James Server on Cassandra"
        node {
            provisionDataForIntegrationTest("${containers.jamesCassandra}", "${jamesCliWithOptions}")

            echo "Running integration tests on Cassandra on ${buildId}"
            sh "${findImapPortCassandra} && docker run ${verbose} --name=${containers.integrationCassandra} --entrypoint=\"/root/integration_tests.sh\" ${useMavenCache} --volumes-from=${containers.gitPublish} ${images.jamesCompile} ${integrationArguments}"

            testingGuiceCassandra.success();
        }
        
        
        stage "Deploying Guice Server with JPA ${buildId}"
        node {
            sh "cd dockerfiles/run/guice/jpa; docker cp ${containers.keystore}:${keystorePath} destination/conf"
            sh "cd dockerfiles/run/guice/jpa; docker cp ${containers.jamesCompile}:${jarPathJPA} destination"
            sh "cd dockerfiles/run/guice/jpa; docker cp ${containers.jamesCompile}:${libPathJPA} destination"
            sh "cd dockerfiles/run/guice/jpa; docker cp ${containers.jamesCompile}:${cliJarPathJPA} destination"
            sh "cd dockerfiles/run/guice/jpa; docker cp ${containers.jamesCompile}:${clilibPathJPA} destination"

            sh "cd dockerfiles/run/guice/jpa; docker build --tag=${images.jamesJPA} ."

            dockeringGuiceJPA.success()

            sh "docker run --detach=true --name=${containers.jamesJPA} --hostname ${hostname} --expose=143 --publish-all=true ${images.jamesJPA}"

            echo 'Waiting for James server to be deployed'
            try {
                waitForCommandSuccess("docker exec ${containers.jamesJPA} ${jamesCliWithOptions} listusers", maxRetries)
            } catch (Exception e) {
                sh "docker logs ${containers.jamesJPA}"
            }

            deployingGuiceJPA.success();
        }
        stage "Configuring James Server on JPA"
        node {
            provisionDataForIntegrationTest("${containers.jamesJPA}", "${jamesCliWithOptions}")

            echo "Running integration tests on JPA on ${buildId}"
            sh "${findImapPortJPA} && docker run ${verbose} --name=${containers.integrationJPA} --entrypoint=\"/root/integration_tests.sh\" ${useMavenCache} --volumes-from=${containers.gitPublish} ${images.jamesCompile} ${integrationArguments}"

            testingGuiceJPA.success();
        }

        stage "Deploying James Server with Spring + JPA ${buildId}"
        node {
            sh "cd dockerfiles/run/spring; docker cp ${containers.keystore}:${keystorePath} destination/conf"
            sh "cd dockerfiles/run/spring; docker cp ${containers.jamesCompile}:${zipPath} destination"

            sh "cd dockerfiles/run/spring; docker build --tag=${images.jamesSpring} ."

            dockeringSpringJPA.success()

            sh "docker run --detach=true --name=${containers.jamesSpring} --hostname ${hostname} --expose=143 --publish-all=true ${images.jamesSpring}"

            echo 'Waiting for James server to be deployed'
            try {
                waitForCommandSuccess("docker exec ${containers.jamesSpring} ${jamesCliWithOptionsSpring} listusers", maxRetries)
            } catch (Exception e) {
                sh "docker logs ${containers.jamesSpring}"
            }
            deployingSpringJPA.success();
        }
        stage "Configuring James Server on Spring + JPA"
        node {
            sh "docker exec ${containers.jamesSpring} ${jamesCliWithOptionsSpring} adddomain domain"
            sh "docker exec ${containers.jamesSpring} ${jamesCliWithOptionsSpring} adduser imapuser@domain password"

            echo "Running integration tests on ${buildId}"
            sh "${findImapPortSpring} && docker run ${verbose} --name=${containers.integrationSpring} --entrypoint=\"/root/integration_tests.sh\" ${useMavenCache} --volumes-from=${containers.gitPublish} ${images.jamesCompile} ${integrationArguments}"

            testingSpringJPA.success();
        }

        stage "Building Guice Server with Cassandra/Ldap ${buildId}"
        node {
            sh "cd dockerfiles/run/guice/cassandra-ldap; docker cp ${containers.keystore}:${keystorePath} destination/conf"
            sh "cd dockerfiles/run/guice/cassandra-ldap; docker cp ${containers.jamesCompile}:${jarPathCassandraLdap} destination"
            sh "cd dockerfiles/run/guice/cassandra-ldap; docker cp ${containers.jamesCompile}:${libPathCassandraLdap} destination"
            sh "cd dockerfiles/run/guice/cassandra-ldap; docker cp ${containers.jamesCompile}:${cliJarPathCassandra} destination"
            sh "cd dockerfiles/run/guice/cassandra-ldap; docker cp ${containers.jamesCompile}:${clilibPathCassandra} destination"

            sh "cd dockerfiles/run/guice/cassandra-ldap; docker build --tag=${images.jamesCassandraLdap} ."

            dockeringGuiceCassandraLdap.success()
        }

        stage "Deploying Guice Server with JPA then provision data ${buildId}"
        node {
            sh "cd dockerfiles/run/guice/provisioned; cp Dockerfile NewDockerfile; sed -i -- 's,linagora/james-jpa-guice,${images.jamesJPA},g' NewDockerfile"

            sh "cd dockerfiles/run/guice/provisioned; docker build --tag=${images.jamesJpaSampleForTesting} -f NewDockerfile ."

            dockeringGuiceJPASampleTesting.success()

            sh "docker run --detach=true --name=${containers.jamesJpaSampleForTesting} --hostname ${hostname} --expose=143 --publish-all=true ${images.jamesJpaSampleForTesting}"

            echo 'Waiting for James server to be deployed and provision data'
            try {
                waitForCommandSuccess("docker exec ${containers.jamesJpaSampleForTesting} ${jamesCliWithOptions} listusers", maxRetries)
            } catch (Exception e) {
                sh "docker logs ${containers.jamesJpaSampleForTesting}"
            }

            sh "cd dockerfiles/run/guice/provisioned; rm NewDockerfile"
            
            deployingGuiceJPASampleTesting.success();
        }

        if (publishToDocker()) {
            stage "Publishing to Docker Hub"
            node {
                def dUser = dockerUser();
                def dPassword = dockerPassword();
                sh "docker login -u ${dUser} -p ${dPassword}"
                sh "docker tag -f ${images.jamesCassandra} linagora/james-project"
                sh "docker push linagora/james-project"

                sh "docker tag -f ${images.jamesSpring} linagora/james-jpa-spring"
                sh "docker push linagora/james-jpa-spring"

                sh "docker tag -f ${images.jamesJPA} linagora/james-jpa-guice"
                sh "docker push linagora/james-jpa-guice"

                sh "docker tag -f ${images.jamesCassandraLdap} linagora/james-ldap-project"
                sh "docker push linagora/james-ldap-project"

                sh "cd dockerfiles/run/guice/provisioned; docker build --tag=${images.jamesJpaSample} ."

                sh "docker tag -f ${images.jamesJpaSample} linagora/james-jpa-sample"
                sh "docker push linagora/james-jpa-sample"

                publishing.success();
            }
            stage "Continuous Deployment"
            node {
                setDockerHost(continuousDeploymentDockerIp)
                sh "docker pull linagora/james-project"
                if (isAlive("james-project")) {
                    sh "docker rm -f james-project"
                }
                sh "docker run --hostname linagora.com -p '80:80' -p '25:25' -p '110:110' -p '143:143' -p '465:465' -p '587:587' -p '993:993' -p '8000:8000' --link cassandra:cassandra --link elasticsearch:elasticsearch -d --name james-project -v ${continuousDeploymentConfigurationPath}:/root/conf -t linagora/james-project"
                continuousDeployment.success();
            }
        }
    } finally {
        stage "Cleaning ${buildId}"
        node {
            setDockerHost(dockerIp)
            deleteContainer(containers.gitPublish)
            deleteImage(images.gitPublish)

            deleteContainer(containers.jamesCompile)
            deleteImage(images.jamesCompile)

            deleteContainer(containers.cassandra)
            deleteContainer(containers.elasticSearch)

            deleteContainer(containers.jamesCassandra)
            deleteContainer(containers.jamesCassandraLdap)
            deleteContainer(containers.jamesJPA)
            deleteContainer(containers.jamesJpaSampleForTesting)
            deleteContainer(containers.jamesSpring)
            deleteImage(images.jamesCassandra)
            deleteImage(images.jamesCassandraLdap)
            deleteImage(images.jamesJPA)
            deleteImage(images.jamesJpaSample)
            deleteImage(images.jamesJpaSampleForTesting)
            deleteImage(images.jamesSpring)

            deleteContainer(containers.integrationCassandra)
            deleteContainer(containers.integrationJPA)
            deleteContainer(containers.integrationSpring)

            statuses.failPendingStatuses();
        }
    }
}

parallel flows
