import java.util.List
import java.util.ArrayList
import java.util.UUID
import org.kohsuke.github.GitHub
import org.kohsuke.github.GHCommitState
import org.kohsuke.github.GHRepository

// This script must be called with 
// $branch parameter : branch to build specified (used by git workflow-plugin command)
// $repoURL parameter : specifies the commiter GitHub repo URL
// $sha1 parameter : specifies the actual commit

def dockerIp = '62.210.100.33'
def continuousDeploymentDockerIp = '62.210.101.42'
def hostname = 'james.linagora.com'
def maxRetries = 120
def author = extractUsername()
def authorParentURL = "https://github.com/${author}/james-project.git"
def repoName = extractRepoName()

// Not given optional parameters are set to null
def propertyMissing(String name) { null }

public String extractUsername() {
    return "${repoURL}".split('/')[3];
}

public String extractRepoName() {
    return "${repoURL}".split('/')[4].split('\\.')[0];
}

public class CommitStatuses implements Serializable {
    def commitStatuses;

    public CommitStatuses() {
        commitStatuses = new ArrayList<CommitStatus>();
    }

    public void addPendingStatus(CommitStatus status) {
        commitStatuses.add(status);
        status.pending();
    }

    public void failPendingStatuses() {
        for (CommitStatus status : commitStatuses) {
            if (status.state.equals("PENDING")) {
                status.failure();
            }
        }
    }
}

public class CommitStatus implements Serializable {
    def repoName;
    def sha1;
    def description;
    def context;
    def state;

    public CommitStatus(String repoName, String sha1, String description, String step) {
        this.repoName = repoName;
        this.sha1 = sha1;
        this.description = description;
        this.context = "workflow-job step " + step;
    }

    def pending() { createPendingCommitStatus(); }
    def success() { createSuccessCommitStatus(); }
    def failure() { createFailureCommitStatus(); }

    private void createPendingCommitStatus() {
        createCommitStatus("PENDING");
    }

    private void createSuccessCommitStatus() {
        createCommitStatus("SUCCESS");
    }

    private void createFailureCommitStatus() {
        createCommitStatus("FAILURE");
    }

    @NonCPS
    private GHRepository getRepository(String repoName) {
        return GitHub.connectUsingOAuth(System.getenv("GITHUB_TOKEN")).getRepository("linagora/" + repoName);
    }

    @NonCPS
    private void createCommitStatus(String state) {
        this.state = state;
        if (sha1 != null) {
                getRepository(repoName).createCommitStatus(sha1, GHCommitState.valueOf(state), null, description, context);
        }
    }
}

public class Images implements Serializable {
    def cassandra = 'cassandra'
    def elasticSearch = 'elasticsearch:1.5.2'
    def buildId;
    def jamesCompile;
    def jamesCompileJava6;
    def james;
    def jamesJava6;
    def gitPublish;
    
    public Images(String buildId) {
        jamesCompile = 'james-parent-compile-' + buildId;
        jamesCompileJava6 = 'james-parent-compile-java-6-' + buildId;
        james = 'james-server-' + buildId;
        jamesJava6 = 'james-server-java-6-' + buildId;
        gitPublish = 'git/publish-' + buildId;
    }
}

public class Containers implements Serializable {
    def keystore = 'keystore';
    def cassandra;
    def elasticSearch;
    def integration;
    def integrationJava6;
    def jamesCompile;
    def jamesCompileJava6;
    def james;
    def jamesJava6;
    def gitPublish;

    public Containers(String buildId) {
        cassandra = 'cassandra-' + buildId;
        elasticSearch = 'elasticSearch-' + buildId;
        integration = 'integration-' + buildId;
        integrationJava6 = 'integration-java-6-' + buildId;
        jamesCompile = 'james-parent-compile-' + buildId;
        jamesCompileJava6 = 'james-parent-compile-java-6-' + buildId;
        james = 'james-server-' + buildId;
        jamesJava6 = 'james-server-java-6-' + buildId;
        gitPublish = 'git-publish-' + buildId;
    }
}

def jarPath = '/destination/james-server-cassandra-guice-3.0.0-beta5-SNAPSHOT.jar' 
def libPath = '/destination/james-server-cassandra-guice-3.0.0-beta5-SNAPSHOT.lib' 
def zipPath = '/destination/james-server-app-3.0.0-beta5-SNAPSHOT-app.zip'
def cliJarPath = '/destination/james-server-cli-3.0.0-beta5-SNAPSHOT.jar'
def cliLibPath = '/destination/james-server-cli-3.0.0-beta5-SNAPSHOT.lib'
def keystorePath = '/keys/keystore'
def jamesCliWithOptions = 'java -jar /root/james-cli.jar -h 127.0.0.1'
def jamesCliWithOptionsSpring = '/root/james-server-app-3.0.0-beta5-SNAPSHOT/bin/james-cli.sh -h 127.0.0.1 -p 9999'
def useMavenCache = '--volumes-from maven-cache-deploy'

def executeCommand (command) {
   try {
       sh "${command}"
   } catch (Exception e) {
       echo "Error executing ${command} : ${e.getMessage()}"
       e.printStackTrace();
   }
}
def deleteImage = { name -> executeCommand("docker rmi --force=true ${name}") }
def deleteContainer = { name -> executeCommand("docker rm --force=true --volumes=true ${name}") }
def waitForCommandSuccess (command, maxRetries) {
    def tries = 0;
    while (tries++ < maxRetries) {
        try {
            sh command
            return true
        } catch (Exception e) {
            if (tries >= maxRetries) {
                throw new Exception("${} tries exceeded. ${command} failed.", e)
            }
            sh "sleep 1"
        }
    }
}

env.DOCKER_CERT_PATH = '/keys/'
env.DOCKER_TLS_VERIFY = 'TRUE'

def setDockerHost(dockerHost) {
   env.DOCKER_HOST = "tcp://${dockerHost}:2376"
}

def flows = [:]

def sha1OrBranch = {
    if (sha1 == null) {
        return "${branch}";
    }
    return sha1;
}

def isMaster = {
    return sha1OrBranch() == 'master';
}

def dockerUser = {
    return System.getenv("DOCKER_USER");
}

def publishToDocker = {
    return isMaster() && dockerUser() != null;
}

def isAlive(dockerContainer) {
   try {
       sh "docker inspect ${dockerContainer}"
       return true;
   } catch (Exception e) {
       return false;
   }
}

flows["${sha1}"] = {
    setDockerHost(dockerIp)
    def buildId = "${branch.toLowerCase()}-${UUID.randomUUID()}"
    def mergeBranch = "MERGE-${buildId}"
    def images = new Images(buildId);
    def containers = new Containers(buildId);
    def jamesLinks = "--link ${containers.cassandra}:cassandra --link ${containers.elasticSearch}:elasticsearch"
    def findImapPort = "export JAMES_PORT=`docker inspect -f '{{(index (index .NetworkSettings.Ports \"143/tcp\") 0).HostPort}}' ${containers.james}`"
    def findImapPortJava6 = "export JAMES_PORT=`docker inspect -f '{{(index (index .NetworkSettings.Ports \"143/tcp\") 0).HostPort}}' ${containers.jamesJava6}`"
    def sha1ToBuild = sha1OrBranch()
    def integrationArguments = "${dockerIp} \$JAMES_PORT ${sha1ToBuild}"
    def verbose = "-a stdout -a stderr"
    def dockerEnv = "--env=DOCKER_HOST=${env.DOCKER_HOST} --env=DOCKER_CERT_PATH=${env.DOCKER_CERT_PATH} --env=DOCKER_TLS_VERIFY=TRUE"

    def statuses = new CommitStatuses();
    def merging = new CommitStatus(repoName, sha1, "Merging", "1");
    statuses.addPendingStatus(merging);
    def building = new CommitStatus(repoName, sha1, "Building", "2");
    statuses.addPendingStatus(building);
    def dockering = new CommitStatus(repoName, sha1, "Dockering", "3");
    statuses.addPendingStatus(dockering);
    def deploying = new CommitStatus(repoName, sha1, "Deploying", "4");
    statuses.addPendingStatus(deploying);
    def testing = new CommitStatus(repoName, sha1, "Running integration tests", "5");
    statuses.addPendingStatus(testing);
    def publishing;
    def continuousDeployment;
    if (publishToDocker()) {
        publishing = new CommitStatus(repoName, sha1, "Publishing", "6");
        statuses.addPendingStatus(publishing);
        continuousDeployment = new CommitStatus(repoName, sha1, "Continuous Deployment", "7");
        statuses.addPendingStatus(continuousDeployment);
    }

    try {
        stage "Perform Merge"
        node {
            git url: authorParentURL, branch: branch
            sh "docker build --tag ${images.gitPublish} -f dockerfiles/merge/Dockerfile ."
            sh "docker run ${verbose} -t --name ${containers.gitPublish} -v /origin ${images.gitPublish} ${sha1ToBuild} ${mergeBranch}"
            merging.success();
        }
        stage "Building ${buildId}"
        node {
            parallel("Building Java 8 ${buildId}": {
                sh "docker build --tag=${images.jamesCompile} dockerfiles/compilation/java-8"
                sh "cd dockerfiles/; docker run ${verbose} --tmpfs /james-project:rw,size=4g --name=${containers.jamesCompile} ${dockerEnv} ${useMavenCache} --volumes-from=${containers.gitPublish} --volume=/destination ${images.jamesCompile} ${mergeBranch}"
            }, "Building Java 6 ${buildId}": {
                sh "docker build --tag=${images.jamesCompileJava6} dockerfiles/compilation/java-6"
                sh "cd dockerfiles/; docker run ${verbose} --tmpfs /james-project:rw,size=4g --name=${containers.jamesCompileJava6} ${dockerEnv} ${useMavenCache} --volumes-from=${containers.gitPublish} --volume=/destination ${images.jamesCompileJava6} -s ${mergeBranch}"
            })
            building.success();
        }
        stage "Deploying ${buildId}"
        node {
            sh "cd dockerfiles/run/guice; docker cp ${containers.keystore}:${keystorePath} destination/conf"
            sh "cd dockerfiles/run/guice; docker cp ${containers.jamesCompile}:${jarPath} destination"
            sh "cd dockerfiles/run/guice; docker cp ${containers.jamesCompile}:${libPath} destination"
            sh "cd dockerfiles/run/guice; docker cp ${containers.jamesCompile}:${cliJarPath} destination"
            sh "cd dockerfiles/run/guice; docker cp ${containers.jamesCompile}:${cliLibPath} destination"
            
            sh "docker run --detach=true --name=${containers.cassandra} ${images.cassandra}"
	    try {
               waitForCommandSuccess("docker exec ${containers.cassandra} cqlsh -e 'describe columnfamily system.local;'", maxRetries)
            } catch (Exception e) {
                sh "docker logs ${containers.cassandra}"
            }
            sh "docker run --detach=true --name=${containers.elasticSearch} ${images.elasticSearch}"
            sh "cd dockerfiles/run/guice; docker build --tag=${images.james} ."
            dockering.success()
            sh "docker run --detach=true --name=${containers.james} --hostname ${hostname} --expose=143 --publish-all=true ${jamesLinks} ${images.james}"
            
            echo 'Waiting for James server to be deployed'
            try {
                waitForCommandSuccess("docker exec ${containers.james} ${jamesCliWithOptions} listusers", maxRetries)
            } catch (Exception e) {
                sh "docker logs ${containers.james}"
            }
            deploying.success();
        }
        stage "Configuring James Server"
        node {
            sh "docker exec ${containers.james} ${jamesCliWithOptions} adddomain domain"
            sh "docker exec ${containers.james} ${jamesCliWithOptions} adduser imapuser@domain password"
             
            echo "Running integration tests on ${buildId}"
            sh "${findImapPort} && docker run ${verbose} --name=${containers.integration} --entrypoint=\"/root/integration_tests.sh\" ${useMavenCache} --volumes-from=${containers.gitPublish} ${images.jamesCompile} ${integrationArguments}"
            testing.success();
        }
        stage "Java 6 integration tests"
        node {
            sh "cd dockerfiles/run/spring; docker cp ${containers.keystore}:${keystorePath} destination/conf"
            sh "cd dockerfiles/run/spring; docker cp ${containers.jamesCompileJava6}:${zipPath} destination"
            sh "cd dockerfiles/run/spring; docker build --tag=${images.jamesJava6} ."
            sh "docker run --detach=true --name=${containers.jamesJava6} --hostname ${hostname} --expose=143 --publish-all=true ${images.jamesJava6}"
    
            echo 'Waiting for James server to be deployed'
            try {
                waitForCommandSuccess("docker exec ${containers.jamesJava6} ${jamesCliWithOptionsSpring} listusers", maxRetries)
            } catch (Exception e) {
                sh "docker logs ${containers.jamesJava6}"
            }

            sh "docker exec ${containers.jamesJava6} ${jamesCliWithOptionsSpring} adddomain domain"
            sh "docker exec ${containers.jamesJava6} ${jamesCliWithOptionsSpring} adduser imapuser@domain password"

            echo "Running integration tests on ${buildId}"
            sh "${findImapPortJava6} && docker run ${verbose} --name=${containers.integrationJava6} --entrypoint=\"/root/integration_tests.sh\" ${useMavenCache} --volumes-from=${containers.gitPublish} ${images.jamesCompileJava6} ${integrationArguments}"
        }
        if (publishToDocker()) {
            stage "Publishing to Docker Hub"
            node {
                def dUser = dockerUser();
                sh "docker login -u ${dUser}"
                sh "docker tag -f ${images.james} linagora/james-project"
                sh "docker push linagora/james-project"
                publishing.success();
            }
            stage "Continuous Deployment"
            node {
                setDockerHost(continuousDeploymentDockerIp)
                sh "docker pull linagora/james-project"
                if (isAlive("james-project")) {
                    sh "docker rm -f james-project"
                }
                sh "docker run --hostname open-paas.org -p '80:80' -p '25:25' -p '110:110' -p '143:143' -p '465:465' -p '587:587' -p '993:993' --link cassandra:cassandra --link elasticsearch:elasticsearch -d --name james-project -t linagora/james-project"
                continuousDeployment.success();
            }
        }
    } finally {
        stage "Cleaning ${buildId}"
        node {
            setDockerHost(dockerIp)
            deleteContainer(containers.gitPublish)
            deleteImage(images.gitPublish)

            deleteContainer(containers.jamesCompile)
            deleteImage(images.jamesCompile)
            deleteContainer(containers.jamesCompileJava6)
            deleteImage(images.jamesCompileJava6)

            deleteContainer(containers.cassandra)
            deleteContainer(containers.elasticSearch)
            deleteContainer(containers.james)
            deleteImage(images.james)
            deleteContainer(containers.jamesJava6)
            deleteImage(images.jamesJava6)

            deleteContainer(containers.integration)
            deleteContainer(containers.integrationJava6)
            statuses.failPendingStatuses();
        }
    }
}

parallel flows
